#' Generate data frames with evaluation issue reports.
#'
#' This function processes the evaluation results stored in `rme$evals`,
#' summarizes them by map version and table (`map_version`, `tabid`), and creates two new data frames in
#' the `rme` object:
#'
#' - `rme$ttr_df`: A "Table Test Report" data frame with one row for each
#'   test that failed for a given map version and table. It includes the test name, a
#'   description of the problem, a comma-separated list of affected cell IDs, and a
#'   comma-separated list of relevant run IDs (if applicable).
#' - `rme$tr_df`: A "Table Report" data frame with one row per map version and table,
#'   containing a consolidated `problem_report` string that combines all
#'   issues for that combination.
#'
#' This report is intended to be used to generate prompts for AI to improve
#' mappings in subsequent runs.
#'
#' @param rme The `rme` object containing evaluation results.
#' @return The `rme` object, augmented with `ttr_df` and `tr_df`.
#' @export
rme_make_report_df = function(rme) {
  restore.point("rme_make_report_df")

  if (is.null(rme$evals) || length(rme$evals) == 0) {
    # Create empty data frames with correct structure
    all_tabs = if (!is.null(rme$cell_df)) unique(rme$cell_df$tabid) else character(0)
    all_maps = if (!is.null(rme$mc_df)) unique(rme$mc_df$map_version) else character(0)

    rme$ttr_df = tibble::tibble(map_version=character(), tabid=character(), test_name=character(), problem_descr=character(), cellids=character(), runids=character())

    if (length(all_tabs) > 0 && length(all_maps) > 0) {
      all_combos = tidyr::crossing(map_version = all_maps, tabid = all_tabs)
      rme$tr_df = all_combos %>% dplyr::mutate(problem_report = "")
    } else {
      rme$tr_df = tibble::tibble(map_version=character(), tabid=character(), problem_report = "")
    }
    return(rme)
  }

  ttr_list = list()

  for (test_name in names(rme$evals)) {
    ev_df = rme$evals[[test_name]]
    if (is.null(ev_df) || NROW(ev_df) == 0) next

    descr = attr(ev_df, "descr")
    if (is.null(descr)) descr = paste0("Issues from ", test_name, ".")
    test_type = attr(ev_df, "test_type")
    if (is.null(test_type)) test_type = "map_version_specific"

    if (!"tabid" %in% names(ev_df) && "cellid" %in% names(ev_df)) {
        ev_df = ev_df %>% dplyr::left_join(rme$cell_df %>% dplyr::select(cellid, tabid) %>% dplyr::distinct(), by="cellid")
    }

    if (!"tabid" %in% names(ev_df)) {
      warning(paste0("Test '", test_name, "' has no 'tabid' column. Skipping in report generation."))
      next
    }

    if (test_type == "map_version_specific") {
      if (!"map_version" %in% names(ev_df)) {
        warning(paste0("Map version specific test '", test_name, "' has no 'map_version' column. Skipping in report generation."))
        next
      }

      tab_summary = ev_df %>%
        dplyr::filter(!is.na(tabid), !is.na(map_version)) %>%
        dplyr::group_by(map_version, tabid) %>%
        dplyr::summarise(
          cellids = {
            data = cur_data()
            all_cellids = c()
            if ("cellid" %in% names(data)) {
              all_cellids = c(all_cellids, stats::na.omit(data$cellid))
            }
            if ("cellids" %in% names(data)) {
              unlisted = unlist(stringi::stri_split_fixed(stats::na.omit(data$cellids), ","))
              all_cellids = c(all_cellids, unlisted[unlisted != ""])
            }
            if(length(all_cellids) > 0) paste(sort(unique(all_cellids)), collapse = ",") else NA_character_
          },
          runids = {
            data = cur_data()
            all_runids = c()
            if ("runid" %in% names(data)) all_runids = c(all_runids, stats::na.omit(data$runid))
            if ("runids" %in% names(data)) all_runids = c(all_runids, unlist(stringi::stri_split_fixed(stats::na.omit(data$runids), ",")))
            if ("invalid_runid" %in% names(data)) all_runids = c(all_runids, stats::na.omit(data$invalid_runid))

            all_runids = all_runids[all_runids != ""]
            if (length(all_runids) > 0) paste(sort(unique(as.character(all_runids))), collapse = ",") else NA_character_
          },
          n_issues = dplyr::n(),
          .groups = "drop"
        ) %>%
        dplyr::mutate(
          test_name = test_name,
          problem_descr = paste0(descr, " (", n_issues, " instances found).")
        ) %>%
        dplyr::select(map_version, tabid, test_name, problem_descr, cellids, runids)

      ttr_list[[test_name]] = tab_summary

    } else if (test_type == "discrepancy") {
      # Handle runids_differ
      if (test_name == "runids_differ") {
        if(NROW(ev_df) == 0) next
        discrepancy_report = ev_df %>%
          dplyr::group_by(tabid, cellid) %>%
          dplyr::mutate(
            details = purrr::map_chr(map_version, function(current_mv) {
              my_runids = runids[map_version == current_mv]
              other_maps = cur_data() %>% dplyr::filter(map_version != current_mv) %>%
                dplyr::group_by(runids) %>%
                dplyr::summarise(mvs = paste(stringi::stri_replace_first_regex(map_version,"^[^:]+:",""), collapse=", "), .groups="drop")

              other_strs = paste0("runids '", other_maps$runids, "' (by ", other_maps$mvs, ")")
              paste0("This version maps to runids '", my_runids, "', while others map to: ", paste(other_strs, collapse="; "))
            })
          ) %>%
          dplyr::ungroup() %>%
          dplyr::mutate(
            test_name = test_name,
            problem_descr = paste0(descr, " for cell ", cellid, ". ", details)
          ) %>%
          dplyr::group_by(map_version, tabid, test_name) %>%
          dplyr::summarise(
            problem_descr = paste(problem_descr, collapse = "\n"),
            cellids = paste(sort(unique(cellid)), collapse=","),
            runids = NA_character_, # Not applicable for aggregated discrepancy report
            .groups="drop"
          )
        ttr_list[[test_name]] = discrepancy_report
      } else {
        warning(paste0("Discrepancy test '", test_name, "' not implemented in report generation. Skipping."))
      }
    }
  }

  ttr_df = dplyr::bind_rows(ttr_list)

  if (NROW(ttr_df) > 0) {
    tr_df = ttr_df %>%
      dplyr::mutate(problem_report_part = paste0(
        "--- Test: ", test_name, " ---\n",
        problem_descr,
        dplyr::if_else(test_name != "runids_differ" & !is.na(cellids), paste0("\n-> Affected cellids: ", cellids), ""),
        dplyr::if_else(test_name != "runids_differ" & !is.na(runids), paste0("\n-> Affected runids: ", runids), "")
      )) %>%
      dplyr::group_by(map_version, tabid) %>%
      dplyr::summarise(problem_report = paste(problem_report_part, collapse = "\n\n"), .groups = "drop")
  } else {
    tr_df = tibble::tibble(map_version=character(), tabid=character(), problem_report=character())
  }


  all_tabs = if (!is.null(rme$cell_df)) unique(rme$cell_df$tabid) else character(0)
  all_maps = if (!is.null(rme$mc_df)) unique(rme$mc_df$map_version) else character(0)

  if (length(all_tabs) > 0 && length(all_maps) > 0) {
    all_combos = tidyr::crossing(map_version = all_maps, tabid = all_tabs)
    tr_df = tr_df %>%
      dplyr::full_join(all_combos, by = c("map_version", "tabid")) %>%
      dplyr::mutate(problem_report = ifelse(is.na(problem_report), "", problem_report))
  }

  rme$ttr_df = ttr_df
  rme$tr_df = tr_df

  return(rme)
}
